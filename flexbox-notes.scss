.parent {
    display: flex || inline-flex; // This makes it possible to align any children of that element into rows or columns. You do this by adding the flex-direction property to the parent item and setting it to row or column.
    flex-direction: row | column | row-reverse | column-reverse; // align the children: horizontally | horizontally in reverse order | vertically | vertically in reverse order
    justify-content: center | flex-start | flex-end | space-between | space-around | space-evenly | start | end | left | right; // LEFT TO RIGHT. Pack children: from start | from end | around center | from start | from end | from left | from right // ALIGN children along main axis (from left to right, how children are distributed)
    align-content: center | flex-start | flex-end | space-between | space-around // TOP TO BOTTOM. This aligns a flex containerâ€™s lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.
    align-items: center | stretch | flex-start | flex-end | baseline | first baseline | last baseline | start | end | self-start | self-end; // TOP TO BOTTOM, ALIGN children along cross axis (top to bottom, how high or low items sit in the flex container)
    flex-wrap: nowrap | wrap | wrap-reverse; // default, all flex children will be on one line, does not wrap children| flex children will wrap onto multiple lines, from top to bottom. | flex children will wrap onto multiple lines from bottom to top.
}

.child {
    flex-grow: 0 | 1 | 2 | 3 | 4; // 1 = space in container is distributed equally to all children, 2 = item will try to take up 2x the amount of space as other items, 4 = try to take up 4x the space as other items, etc
    flex-shrink: 1 | 2 | 5 // 0 = default; // 2 = item shrinks 3x as much as other items shrink. 5 = 5x attempt to shrink. Items shrink when the width of the parent container is smaller than the combined widths of all the flex items within it.
    order: 0|2|5; // default is items are laid out in the source order, but you can manually order items, ie, order items to appear 2nd, 5th, etc
    flex-basis: auto ||10em || 20rem || 75px; // auto = default; specifies the initial size of the item before CSS makes adjustments with flex-shrink or flex-grow.
    flex: 0 1 auto | 2 1 auto; // default; // flex-grow: 0; flex-shrink: 1; and flex-basis: auto; || flex-grow: 2, flex-shrink: 1, and flex-basis: auto || (set flex values all at once on child items)
    align-self: auto | flex-start | flex-end | center | baseline | stretch; // center manually aligns item at: center of row or center of column || flex-end manually aligns items at bottom of row, or whatever in a column. || align-self is useful since other common adjustment techniques using the CSS properties float, clear, and vertical-align do not work on flex items. || Accepts the same values as align-items and will override any value set by the align-items property.
}