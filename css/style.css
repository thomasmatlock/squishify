.btn {
  /*cool something is a link, add :link to it
    :link is a pseudo-class, which are special states of selectors
    we want to use this to style elements under special conditions, like hover or link or whatever
    here we want the normal and visited states to look styled the same*/
  margin-top: 2vh;
  /*so the :after pseudo element is pretty cool
      here we create the ghost element that appears on hover then retreats again, it appear to zoom into infinity
      it adds virtual element right after element we are selecting which we can style
      the trick is basically place it behind our element, when activated it appears, but then also disappears behind its original element
      we ALWAYS specify content property, even empty, or else it wont appear*/ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /*removes underline of default anchor*/
    padding: 1.5rem 4rem;
    /*this creates button/element size around text, with 1 value, its for all 4 sides, but 2 values
        val1 is top/bottom, val2 is right/left
        we can also write 4 values, top right bottom left, but that kinda makes a weird asymetrical shape*/
    display: inline-block;
    /*inlineblocks are treated as text, so set textalign center in parent element, text-box*/
    color: #000;
    /*transition property always goes on initial state, not hover/active, thats just how it works*/
    transition: all ease-out 0.1s;
    /*you can specify which property(s) you want to animate with transition or just write 'all', and specify time*/
    position: relative;
    /*this is so the :after class can latch on this because absolute positions itself to nearest relative*/
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-0.3rem);
    /*causes element to appear to rise up*/
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /*box shadow takes a bunch of values, 
      value1 is x direction, left/right, 
      val2 is y, we want 1rem
      3rd value is blur
      val4 is color, we go complete black rgba with 20% opacity */
    /*this is a pseudo element for after, which happens on hover*/ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      /*just like translate has x/y versions, so does scale*/
      opacity: 0;
      /*fadeout element*/ }
  .btn:active {
    /*heres what happens when it's active by user, aka a click lol*/
    transform: translateY(-0.1rem);
    /*this value is in relation to initial state, not hover state*/
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
    /*cool effect, cut shadow length and shadow blur in half so element looks closer to page,
        further from user when clicked*/ }
  .btn--white {
    background-color: #fff;
    border-radius: 10rem; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: '';
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /*so it looks like its below oru button, so position it absolutely, and 0 from top/left to align it*/
    position: absolute;
    /*absolute position needs a reference, which is 1st element with relative position that it can find
        which means we go up to btn:link/visited and set position to reletive, so this hover can "latch" onto it*/
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s; }
  .btn--animated {
    animation: moveInBottom 0.1s ease-out 1s;
    /*last value is delay, we want it to come in last*/
    animation-fill-mode: backwards;
    /*without this, the element initially appears, then after delay, disappears, then animates
      this prevents it from initially appearing and being ugly like dat
      --- it automatically applies the starting keyframe values before it even starts animating, like opacity etc*/ }

.btn-text:link, .btn-text:visited {
  color: #55c57a;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  font-size: 1.6rem;
  transition: all 0.2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: white;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.25);
  transform: translateY(0px); }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /*putting zero basically places elements how it looks normally
    above we just offset the starting keyframes by translating it over */ } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0);
    /*putting zero basically places elements how it looks normally
    above we just offset the starting keyframes by translating it over */ } }

* {
  font-size: 16px;
  font-family: Segoe UI, Frutiger, Frutiger Linotype, Dejavu Sans, Helvetica Neue, Arial, sans-serif; }

body {
  background-image: linear-gradient(to left, #0463db 0%, #0b88e6 33%, #13aff2 66%, #19d2fc 100%); }

p {
  padding: 10%; }

.textBoxParent {
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  align-content: center;
  -webkit-user-select: none;
  /* Safari */
  -moz-user-select: none;
  /* Firefox */
  -ms-user-select: none;
  /* IE10+/Edge */
  user-select: none; }

.textBoxChild {
  border: 1px solid green;
  padding: 10%;
  width: 100%;
  height: 100%;
  border: 1px dotted black;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  align-content: center;
  -webkit-user-select: none;
  /* Safari */
  -moz-user-select: none;
  /* Firefox */
  -ms-user-select: none;
  /* IE10+/Edge */
  user-select: none;
  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1); }
  text-align:center .textBoxChild:hover {
    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2); }

.userTextContainer {
  background-color: white;
  height: 75vh;
  width: 90vw;
  margin: 0 10%;
  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
  -webkit-user-select: none;
  /* Safari */
  -moz-user-select: none;
  /* Firefox */
  -ms-user-select: none;
  /* IE10+/Edge */
  user-select: none;
  text-align: center; }

#userInputReset,
#userTextContainer_converted {
  display: none;
  -webkit-user-select: none;
  /* Safari */
  -moz-user-select: none;
  /* Firefox */
  -ms-user-select: none;
  /* IE10+/Edge */
  user-select: none; }

#userInput,
#userInputConverted {
  height: 100%;
  width: 100%; }

.userTextContainer {
  text-align: center; }

.userInputSubmitBtn {
  width: 300px;
  height: 50px;
  color: black;
  display: flex;
  margin: 5vh;
  justify-content: center;
  align-items: center;
  align-content: center;
  border-radius: 4px;
  cursor: pointer;
  background-color: white;
  background-color: white;
  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);
  transition: 0.1s ease all; }
  .userInputSubmitBtn:hover {
    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2); }
  .userInputSubmitBtn:active {
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);
    transform: translateY(2px); }
